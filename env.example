############################################
# HTTP server configuration

# HTP server listening host or address. Multiple addresses can be specified
# separated by comma, empty value equals to listening on all interfaces.
# Defaults to localhost in development and empty value in production
#HTTP_HOST=

# HTTP server port
# Defaults to 3000
#HTTP_PORT=3000

# When certificates are provided, the server will listen as HTTPS on HTTP_PORT
#HTTPS_KEY_FILE=certs/https_key.pem
#HTTPS_CERT_FILE=certs/https_cert.pem

# Comma-separated list of trusted client IP addresses for the upload API.
# Clients not in the list cannot access the upload API (PUT/POST files and call
# Repository Management endpoint), they will get rejected as they are considered
# untrusted. The client address will be taken from proxy header X-Forwarded-For
# if request comes from trusted proxy (see TRUST_PROXY below), or from client
# socket address. The format of the address must conform to proxy-addr library
# syntax, see https://www.npmjs.com/package/proxy-addr. In short, the address
# might be either loopback (127.0.0.1, ::1), linklocal (fe80::/10 and
# 169.254.0.0/16), uniquelocal (fc00::/7, 10.0.0.0/8, 172.16.0.0/12,
# 192.168.0.0/16), or custom address with mask like 10.10.1.0/24 or
# 172.16.5.2/32 or fd03:cc8b:0d31::/48.
# Defaults to empty string (trust everybody)
#UPLOAD_ALLOWED_IPS=

# Comma-separated list of trusted proxy IP addresses, if any. Proxy
# headers will be accepted only from trusted proxies. Multiple addresses can be
# specified separated by comma. The syntax for TRUST_PROXY is the same as for
# the UPLOAD_ALLOWED_IPS parameter above.
# Defaults to empty string (don't trust any proxy headers).
#TRUST_PROXY=loopback

# Basic authorization for the upload API in the form username:password. When
# set, clients will not be able to access the upload API (PUT/POST files and
# call Repository Management endpoint) without providing the credentials. The
# credentials will be checked against the credentials in the HTTP Authorization
# header. If credentials do not contain colon, space and comma, more credentials
# can be provided in a comma-separated list.
# Defaults to empty string (no authorization)
#UPLOAD_BASIC_AUTH=upload:my-secret-password

# Use dictionary-like notation with double-quotes to allow special characters
# like quotes, spaces, commas, colons, etc. The quotes will be stripped before
# the password is used.
#UPLOAD_BASIC_AUTH={upload:"my \"secret:,password;", "upload 2":"other password"}

# Uploaded file size limit in bytes. Applies to single file during upload.
# Defaults to no limit
#UPLOAD_SIZE_LIMIT=16777216

# Upload POST field name for the file to upload. The field name is used to find
# the uploaded file in the request body. The field name is case-sensitive.
#UPLOAD_POST_FIELD=package

############################################
# Repository configuration

# Incoming directory. Defaults to <current dir>/data/incoming
#INCOMING_DIR=./data/incoming

# Target repository directory. Sub-folders deb and rpm will be created with
# another several levels of subfolders named by distributions and releases.
# Debian will be reachable under <repo_dir>/deb/<distribution>/dists/<release>.
# RedHat will be reachable under <repo_dir>/rpm/<distribution>/<release>.
# Defaults to <current dir>/data/repo
#REPO_DIR=./data/repo

# State-holding directory where we store the state.
# Defaults to <current dir>/data/repo-state
#REPO_STATE_DIR=./data/repo-state

# GPG private key used to sign Debian and RedHat repository data. The key will
# be automatically imported and used also to verify Debian signatures. The key
# shell be password-less and either in ASCII-armored format or binary format.
# Defaults to nothing (do not sign repository data)
#GPG_REPO_PRIVATE_KEY_FILE=repo-key.asc

# GPG public keys for reprepro tool to verify Debian signatures. The file might
# contain multiple public keys. If the file is missing and the Debian-like
# repository contains signed Debian files, they will be printed to server logs.
# Defaults to nothing
#GPG_PUBLIC_KEYS_FILE=public_keys.key

# GPG public keys directory containing keys to verify Debian signatures.
# Defaults to nothing
#GPG_PUBLIC_KEYS_DIR=

# Signing script used to sign repository data. Used by Debian reprepro hook as
# well as during RedHat repository building. The script always gets three
# arguments: input file to sign, output file with embedded signature, and output
# file name for detached signature. See example implementation in repository.
# Defaults to ./scripts/sign.sh
#SIGN_SCRIPT=./scripts/sign.sh

# Wrapper script for RedHat's repository createrepo_c tool. Ensures that
# generated repository data is signed. The script gets two arguments: base
# folder with RPMs (RPMs are stored under
# Packages/<package first char>/ subdirectories), signing script path (see
# above). The script will be called initially with --version argument to check
# the existence of the createrepo_c tool, the default implementation forwards
# the call to createrepo_c tool. If the tool is not available (non-zero exit
# code or the script execution fails) or if the CREATEREPO_SCRIPT is defined
# empty, the RedHat repository upload functionality will be disabled.
# Defaults to ./scripts/createreo.sh
#CREATEREPO_SCRIPT=./scripts/createrepo.sh

# Path to the reprepro tool. The tool will be called initially with --version
# argument to check the existence of the tool. If the tool is not available
# (execution fails) or if the REPREPRO_BIN is defined empty, the Debian
# repository upload functionality will be disabled.
# Defaults to reprepro in the system PATH
#REPREPRO_BIN=reprepro

# Path to the GPG tool. The GPG is used by the Debian reprepro tool to verify
# the signatures of the signed incoming packages. When the reprepro tool is not
# available (see above), the GPG tool will not be used as well. The tool will be
# called initially with --version argument to check the existence of the tool.
# If the tool is not available (execution fails) or if the GPG_BIN is defined
# empty, no public keys will be imported to GPG keyring, so no public keys will
# be used to verify the package signatures.
# Defaults to gpg
#GPG_BIN=gpg

# Path to the GPG home directory. The directory is used to store the GPG keyring
# and other GPG-related files.
# Defaults to ~/.gnupg
#GPGHOMEDIR=~/.gnupg

# Default Origin: value of Debian-like repository. The environment key can
# be overridden per-release like DEB_ORIGIN_DEBIAN_BOOKWORM, or
# DEB_ORIGIN_BOOKWORM, or per distribution like DEB_ORIGIN_DEBIAN. The
# value will be evaluated in the following order, first non-empty wins:
#
#   1. DEB_ORIGIN_DEBIAN_BOOKWORM - most specific
#   2. DEB_ORIGIN_BOOKWORM
#   3. DEB_ORIGIN_DEBIAN
#   4. DEB_ORIGIN - least specific
#
# Defaults to none (do not output Origin: field)
#DEB_ORIGIN=

# Default Description: value of Debian-like repository. The environment key can
# be overridden per-release like DEB_DESCRIPTION_DEBIAN_BOOKWORM, or
# DEB_DESCRIPTION_BOOKWORM, or per distribution like DEB_DESCRIPTION_UBUNTU.
# The precedence rules are the same as for DEB_ORIGIN values.
# Defaults to none (do not output Description: field)
#DEB_DESCRIPTION=

############################################
# Application configuration

# Docker container user UID. The entrypoint script updates the `node` user to
# this UID, so the container can access files created by the host user.
# Defaults to 1000
#UID=1000

# Docker container group GID. The entrypoint script updates the `node` group to
# this GID, so the container can access files created by the host group.
# Defaults to 1000
#GID=1000

# Path to the .env file to load. The file, if exists, is loaded during
# application startup, so the environment variable needs to be set before
# running the application. Use file /dev/null to disable the loading.
# Defaults to .env
#DOTENV_CONFIG_PATH=

# Minimum logging level to emit messages, can be (from lower to higher level)
# either debug, info, warn or error.
# Defaults to info
#LOG_LEVEL=
